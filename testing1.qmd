# Statistical testing

Downloading Glinos *et al.* dataset (GTEx, PTBP1 knockexondown)

```{r}
#| eval: false
library(here)
# https://drive.google.com/file/d/1ATHgwFlIMmI651C5TYtiBxm2atTvbBYn/view?usp=sharing
# counts
url <- "https://drive.google.com/uc?export=download&id=1ATHgwFlIMmI651C5TYtiBxm2atTvbBYn"
filename <- "quantification_flair_filter.counts.txt.gz"
path <- here("data", filename)
if (!file.exists(path)) {
  download.file(url, path)
}
# GTF
url <- "https://drive.google.com/uc?export=download&id=1S0TRXoXsfnXwJ0Dh5bLqVmyvFAAALFMU"
filename <- "flair_filter_transcripts.gtf.gz"
path <- here("data", filename)
if (!file.exists(path)) {
  download.file(url, path)
}
# metadata
url <- "https://drive.google.com/uc?export=download&id=1LpYPXXhMtUV3vMG7SMLV69-JxZfc59o2"
filename <- "glinos_metadata.csv"
path <- here("data", filename)
if (!file.exists(path)) {
  download.file(url, path)
}
```

Assembling the object:

```{r}
#| eval: false
library(readr)
library(dplyr)
library(stringr)
counts <- read_delim(here("data", "quantification_flair_filter.counts.txt.gz"))
meta <- read_delim(here("data", "glinos_metadata.csv"))
colnames(meta)[10] <- "total_reads"
meta <- meta |>
  mutate(condition = str_extract(sample_id, "(ctrl|exp)")) |>
  select(sample_id, sample_name, condition, contains("read") | contains("3_prime")) |>
  arrange(condition, sample_name)

rnames <- counts$transcript
counts <- as.matrix(counts[,meta$sample_id]) # subset to the knockdown
rownames(counts) <- rnames
```

```{r}
#| eval: false
library(SummarizedExperiment)
se <- SummarizedExperiment(list(counts = counts),
                           colData = meta)
saveRDS(se, file=here("data", "glinos_se.rds"))
```

```{r}
#| message: false
library(here)
library(SummarizedExperiment)
se <- readRDS(here("data", "glinos_se.rds"))
keep <- rowSums(assay(se) >= 10) >= 6
table(keep)
se <- se[keep,]
```

```{r}
#| include: false
if (tryCatch(packageVersion("tximeta") < "1.25.1", error = function(e) TRUE)) {
  message("installing dev version of tximeta")
  remotes::install_github("thelovelab/tximeta")
}
set.seed(5) # for jittered plots
```

```{r}
#| message: false
library(DESeq2)
library(tximeta)
library(stringr)
colsums <- colSums(assay(se, "counts"))
cpm <- t(t(assay(se, "counts")) / colsums * 1e6)
assay(se, "abundance") <- cpm
assay(se, "length", withDimnames=FALSE) <- matrix(1000, nrow=nrow(se), ncol=ncol(se))
se$condition <- factor(se$condition, c("ctrl","exp"))
se_sub <- se[grepl("ENSG",rownames(se)),]
tx2gene <- DataFrame(txid = rownames(se_sub),
                     geneid = str_extract(rownames(se_sub), ".*_(ENSG.*)$", group=1))
gse <- summarizeToGene(se_sub, tx2gene = tx2gene, skipRanges=TRUE)
#saveRDS(gse, file=here("data","glinos_gene_counts.rds"))
```

```{r PCA}
dds <- DESeqDataSet(gse, ~condition)
keep <- rowSums(counts(dds) >= 10) >= 6
table(keep)
dds <- DESeq(dds, minRep=Inf)
res <- results(dds)
summary(res)
```

```{r glinos-plotcounts}
library(org.Hs.eg.db)
gene_anno <- DataFrame(geneid = str_extract(rownames(dds), "(ENSG.*)\\..*", group=1),
                       baseMean = round(rowData(dds)$baseMean))
gene_anno$symbol <- org.Hs.eg.db |> mapIds(gene_anno$geneid, "SYMBOL", "ENSEMBL")
gene_anno$symbol[is.na(gene_anno$symbol)] <- gene_anno$geneid[is.na(gene_anno$symbol)]
rowData(dds)$symbol <- gene_anno$symbol
idx <- which(rowData(dds)$symbol == "PTBP1")
plotCounts(dds, gene=idx)
```

```{r glinos-pca}
vsd <- vst(dds, blind=FALSE)
plotPCA(vsd)
```

```{r}
#saveRDS(dds, file=here("data", "glinos_deseq2_gene.rds"))
#saveRDS(vsd, file=here("data", "glinos_vst_gene.rds"))
```

```{r}
#| eval: false
library(Glimma)
g <- glimmaMA(
  dds,
  groups=dds$condition,
  anno=gene_anno[complete.cases(results(dds)),-1],
  main="Glinos et al. (2022) - PTBP1 knockdown", # title above left summary plot
  transform.counts="cpm",
  test="Wald", name="condition_exp_vs_ctrl",
  independentFiltering=FALSE,
  cooksCutoff=FALSE
)
htmlwidgets::saveWidget(g, here("data","glinos_ma-plot.html"))
```

```{r}
# DTU filter
se <- se_sub # removed txps not associated with genes
rowData(se)$gene_id <- tx2gene[,"geneid"]
```

```{r}
#| message: false
library(plyxp)
xp <- se |>
  new_plyxp()
xp <- xp |>
  mutate(rows(gene = str_extract(gene_id, "(ENSG.*)\\..*", group=1),
              symbol = mapIds(org.Hs.eg.db, gene, "SYMBOL", "ENSEMBL"),
              symbol = dplyr::case_when(
                is.na(symbol) ~ gene,
                TRUE ~ symbol
              )))
tab <- table(rowData(se)$gene_id)
one_isoform_gene <- names(tab)[ tab == 1]
xp <- xp |>
  filter(rows(!gene_id %in% one_isoform_gene)) |>
  arrange(rows(gene_id))
```

```{r}
head(table(table(rowData(xp)$gene_id))) # confirm no single isoform genes
```

```{r}
se <- se(xp)
# needed for satuRn
rowData(se)$isoform_id <- rownames(se)
```

```{r}
# 5 seconds
library(satuRn)
se <- satuRn::fitDTU(se, formula=~0 + condition)
```

```{r}
design <- model.matrix(~0 + condition, colData(se))
colnames(design)
colnames(design) <- levels(se$condition)
L <- limma::makeContrasts(
  exp_vs_ctrl = exp - ctrl,
  levels = design
)
L # contrast matrix
```

```{r saturn-test}
se <- satuRn::testDTU(
  object = se,
  contrasts = L,
  diagplot1 = TRUE,
  diagplot2 = TRUE
)
#saveRDS(se, file=here("data","glinos_saturn_dtu.rds"))
```

```{r}
sig_res <- rowData(se)[["fitDTUResult_exp_vs_ctrl"]] |>
  tibble::as_tibble() |>
  dplyr::bind_cols(as.data.frame(rowData(se)[,1:4])) |>
  dplyr::filter(empirical_FDR < .1) |>
  dplyr::select(gene_id, isoform_id, symbol, estimates, empirical_pval, empirical_FDR) |>
  dplyr::arrange(empirical_pval)
#write.csv(sig_res, file=here("data","glinos_saturn_dtu.csv"), quote=FALSE, row.names=FALSE)
sig_res
```

```{r}
cpm <- assay(se, "abundance")[rowData(se)$symbol == "PDLIM7",]
rownames(cpm) <- seq_len(nrow(cpm))
colnames(cpm) <- se$condition
round(cpm)
```

```{r}
library(GenomicFeatures)
#txdb <- makeTxDbFromGFF(here("data","flair_filter_transcripts.gtf.gz"))
#saveDb(txdb, file=here("data","flair_filter_transcripts.sqlite"))
txdb <- loadDb(here("data","flair_filter_transcripts.sqlite"))
exons <- exonsBy(txdb, by="tx")
txps <- AnnotationDbi::select(txdb, keys(txdb, "TXID"), c("TXNAME","GENEID"), "TXID") |>
  tibble::as_tibble() |>
  dplyr::mutate(TXID = as.character(TXID))
```

Now we have to do a little metadata cleanup to make everything easy to compare.

First we clean up the isoform identifiers:

```{r}
sig_res <- sig_res |>
  mutate(
    isoform_id = str_replace(isoform_id, "(_ENSG.*?)_ENSG.*","\\1"),
    isoform_id = str_replace(isoform_id, "(ENST.*?)_ENSG.*","\\1")
  )
```

Next change the names of the exons:

```{r}
length(exons)
all.equal(names(exons), txps$TXID)
names(exons) <- txps$TXNAME

```

Plot gardener example

```{r}
library(plotgardener)
tx_from_symbol <- sig_res %>%
                  filter(symbol == "PDLIM7")%>%
                  pull(isoform_id)
tx_from_symbol

exons[names(exons) %in% tx_from_symbol]


db_assembly <- plotgardener::assembly(
  Genome = "hg38",
  TxDb = txdb,
  OrgDb = org.Hs.eg.db,
  gene.id.column = "GENEID",
  display.column = "GENEID",
  BSgenome = NULL
)  


library(plotgardener)
library(org.Hs.eg.db)


# Identify the gene of interest by its geneid given its symbol (selectizeInput)
gene_of_interest <- "ENSG00000196923.13"

# Extract genomic coordinates for the gene
gene_coords <- genes(txdb, filter = list(GENEID = gene_of_interest))
transcripts <- transcripts(txdb, filter = list(GENEID = gene_of_interest))

# Extract chromosome, start, and end positions of the gene
gene_chrom <- as.character(seqnames(gene_coords))
gene_start <- min(start(gene_coords))
gene_end <- max(end(gene_coords))

# Define plotting parameters
par <- pgParams(
  chrom = gene_chrom, 
  chromstart = gene_start, chromend = gene_end,
  assembly = db_assembly, just = c("left", "bottom")
)

# Identify transcripts to highlight
#tx_to_show <- transcripts%>% filter(tx_name %in% tx_from_symbol)

#hilite <- data.frame(transcript = tx_to_show, color = "red")  

# Dynamically adjust plot dimensions based on transcript count
plotT_height <- round(50/4, 3)  # Height scales with transcript count
page_height <- plotT_height + 1  
page_width <- 10 


# Create a new plotting page
plotgardener::pageCreate(
  width = page_width + 1, height = page_height, 
  default.units = "inches", showGuides = FALSE
)  

# Plot transcripts with dynamic height 
plotgardener::plotTranscripts(
  params = par, 
  x = 0.5, y = 0, width = page_width, height = plotT_height, 
  just = c("left", "top"), default.units = "inches",
  limitLabel = FALSE,
  fontsize = 9,
  labels = "transcript"
)


```

# Get spliced exons and non-spliced exons

```{r}
library(plyranges)

sig_exons <- exons[names(exons) %in% sig_res$isoform_id] #get GRangesList only from the DTUs
sig_exons #59 transcripts GRangesList // 34 genes

## for some reason im loosing 2 transcripts:
setdiff(sig_res$isoform_id, names(sig_exons))
# #add manually
# sig_exons <- c(sig_exons, GRangesList(exons["59d5f69f-18ce-4229-b091-4f57cfde2e0c"]))
# sig_exons <- c(sig_exons, GRangesList(exons["b79cfcbb-8d15-48df-9ace-12af97d8b32f"]))

flat_sig_exons <- unlist(sig_exons)
  
sig_res <-  sig_res %>%
  mutate(sign = sign(estimates))


#include coef +/- column from the DTU analysis saturn 
flat_sig_exons$coef <- sig_res$estimates[match(names(flat_sig_exons), sig_res$isoform_id)]
flat_sig_exons$sign <- sig_res$sign[match(names(flat_sig_exons), sig_res$isoform_id)]

#include gene name for each transcript name 
flat_sig_exons$gene <- sig_res$gene_id[match(names(flat_sig_exons), sig_res$isoform_id)]
flat_sig_exons$isoform <- names(flat_sig_exons)

# group by gene and coefficient, then project down to flatten version
x_flat <-flat_sig_exons |>
        group_by(gene, sign) |>
        reduce_ranges_directed(
          min.gapwidth = 0L,
          avg_coef = mean(coef),
          ids = paste(isoform, collapse=","),
          mixed = TRUE
        ) 
#exons overlap but are not exactly the same,  reduce_ranges()  will merge them into a single contiguous range that spans the union of all overlapping regions 
# Overlapping exons → merged into a single continuous exon.
# Non-overlapping exons → remain separate.

x_flat$aux_id <- seq(length(x_flat))
# take the flattened `+` exons and remove the flatted `-` exons --> result is exons spliced by PTBP1
spliced_exons <-  x_flat |>
                  filter(sign == 1) |> # Selects only the flattened + strand exons
                  filter_by_non_overlaps_directed( # Removes the parts that overlap with the - strand exons
                      x_flat |> filter(sign == -1)
                      )

length(spliced_exons) # n of spliced exons 
length(unique(spliced_exons$gene)) # n of dif genes
unique(spliced_exons$sign) # all should be + 


non_spliced_exons <- x_flat |>
  filter(!(aux_id %in% spliced_exons$aux_id)) 


length(non_spliced_exons) # n of  exons 
length(unique(non_spliced_exons$gene)) # n of dif genes
unique(non_spliced_exons$sign) 


table(x_flat$sign, useNA = "ifany")


```

Visualize example of Skiped exon event (this will look better with plotgardener when i can filter the transcripts / edit the exons to show)

```{r}
gene_names <-  unique(spliced_exons$gene)

# create list of GRangesList (a GRangesList object per gene)
by_gene <- split(x_flat, x_flat$gene)
# for each gene, split the GRanges by isoform id and convert the result to a GRangesList
x_flat_GRlist <- lapply(by_gene, function(g) GRangesList(split(g, g$ids))) #all exons


# get for only spliced exons
by_gene <- split(spliced_exons, spliced_exons$gene)
spliced_exons_GRlist <- lapply(by_gene, function(g) GRangesList(split(g, g$ids)))
for (name in names(spliced_exons_GRlist)){
  names(spliced_exons_GRlist[[name]]) <- paste0("spliced_", names(spliced_exons_GRlist[[name]])) #add spliced to differentiate bc i cant color with wiggleplot
}

#plot each gene 
for (name in gene_names){
  combined_grl <- c(x_flat_GRlist[[name]], spliced_exons_GRlist[[name]])
  wiggleplotr::plotTranscripts(combined_grl,rescale_introns = TRUE)
  
}

```

Get upstream seq from all exons

```{r}

library(plyranges)
width_upstream <- 100

upstr_spliced_exons <- spliced_exons %>%
        flank_upstream(width = width_upstream) 
# The result will be another GRanges object that still contains 158 ranges,
# but each range now represents the upstream flanking region of the corresponding exon. 

upstr_non_spliced_exons <- non_spliced_exons %>%
        flank_upstream(width = width_upstream) 
# The result will be another GRanges object that still contains 158 ranges,
# but each range now represents the upstream flanking region of the corresponding exon. 
```

```{r}
library(Biostrings)
library(BSgenome)
library(BSgenome.Hsapiens.UCSC.hg38)

seq_spliced_exons <-  Hsapiens |>  ## RNAStringSet object of length 150:
                       getSeq(upstr_spliced_exons) |>
                       RNAStringSet() 
metadata(seq_spliced_exons)$aux_id <- upstr_spliced_exons$aux_id


seq_non_spliced_exons <-  Hsapiens |>  ## RNAStringSet object of length 150:
                       getSeq(upstr_non_spliced_exons) |>
                       RNAStringSet()

metadata(seq_non_spliced_exons)$aux_id <- upstr_non_spliced_exons$aux_id
```

## Create toy example for troubleshooting/testing

```{r}
library(plyranges)
set.seed(1)
toy_df <- data.frame(
  seqnames=rep(c("chr1","chr2"),each=8),
  start=c(11,31,11,41,11,61,61,81),
  width=c(10),
  strand=rep(c("-","+"),each=2),
  gene=rep(c("A","B"),each=8),
  isoform=letters[rep(1:8,each=2)],
  coef=abs(rnorm(16)) * rep(c(1,-1),each=4)
)

toy_x <- toy_df |>
  as_granges()

toy_x <- toy_x |>
  mutate(sign = sign(coef))

toy_flat <- toy_x |>
  group_by(gene, sign) |>
  reduce_ranges_directed(
    min.gapwidth = 0L,
    avg_coef = mean(coef),
    ids = paste(isoform, collapse=",")
  )
toy_flat

toy_flat |>
  filter(sign == 1) |>
  filter_by_non_overlaps_directed(
    toy_flat |> filter(sign == -1)
  )
```

## Create features for ML from the exons upstream sequences

\% of bp per sequence

```{r}

library(Biostrings)
library(ggplot2)
library(tidyr)
library(dplyr)


# % of A/U/C/G
get_bp_count <- function(stringSet){ #input is RNAStringSet object
  bp_counts <- oligonucleotideFrequency(stringSet, width = 1)
}

# % of A/U/C/G
get_bp_percent <- function(stringSet){
  bp_counts <- oligonucleotideFrequency(stringSet, width = 1)
  bp_percent <-  bp_counts / rowSums(bp_counts)

}
# % of pairs (eg AA, AU, AC, etc)
get_dibp_features <- function(stringSet){
  di_freq <- oligonucleotideFrequency(stringSet, width = 2)
  di_perc <- di_freq / (width(stringSet) - 1) #equiv to rowSums
 
  }

# % of triplets (eg AAA, AAU, AAC, etc)
get_tribp_features <- function(stringSet){
  tri_freq <- oligonucleotideFrequency(stringSet, width = 3)
  tri_perc <- tri_freq / (width(stringSet) - 2)
}

```

Fucntion to create windows and calculate % bp per window

-   10 width non-overlapping windows - it creates 40 features (10 windows x 4 bp) per exon (row)

```{r}

get_windows_features <- function(upstr_ranges, #input is GRanges object 
                                 window_width = 10,
                                 width_upstream = 100 ## make sure it maches flankupsteam
                                 ){

    n_windows <- width_upstream / window_width #number of windows generated given the width and the length of the total range region 
    
    windows <- upstr_ranges |> tile_ranges(window_width) #divive in windows
    seq_windows <-  Hsapiens |>  
                     getSeq(windows) |> 
                     RNAStringSet() 
    # RNAStringSet result has n_windows x #exons rows eg if 158 exons, and 10 windows , we will get 1580 rows, 10 fisrt are the windows of the first exon, 11-20 rows are the windows for the next exon etc
    windows_bp <- get_bp_percent(seq_windows) #calculate %bp of all the windows
    # dim(windows_bp)
    
    result_list <- vector("list", n_windows)
    for (window_index in 1:n_windows){ 
      indices <- seq(from = window_index, 
                     by = n_windows, 
                     length.out = length(upstr_ranges))
      
      sub_matrix <- windows_bp[indices, ]
      colnames(sub_matrix) <- paste0("w", window_index, "_", colnames(sub_matrix))
      
      result_list[[window_index]] <- sub_matrix
    }
    final_matrix <- do.call(cbind, result_list)
    # dim(final_matrix) 
    # head(final_matrix)
  return(final_matrix)
}
dim(get_windows_features(upstr_spliced_exons))
dim(get_windows_features(upstr_non_spliced_exons))
```

Create df with all the features (% of bp, di, tri, and windows)

```{r}
create_exon_df <- function(seq_exons, 
                           upstr_exons,
                           label=NA #binary label for ML
                           ) {
  # Convert the RNAStringSet to a data frame and add the auxiliary ID
  df <- as.data.frame(seq_exons) |>
    dplyr::mutate(aux_id = metadata(seq_exons)$aux_id) |>
    dplyr::mutate(label = label)|>
    dplyr::rename(seq = x)
  
  # Add % base pair features, dibp, tribp, and window features
  df <- cbind(df, get_bp_percent(seq_exons))
  df <- cbind(df, get_dibp_features(seq_exons))
  df <- cbind(df, get_tribp_features(seq_exons))
  df <- cbind(df, get_windows_features(upstr_exons))
  
  return(df)
}
spliced_exons_df <- create_exon_df(seq_spliced_exons, 
                                   upstr_spliced_exons,
                                   1)
dim(spliced_exons_df)

non_spliced_exons_df <- create_exon_df(seq_non_spliced_exons, 
                                       upstr_non_spliced_exons,
                                       0)
dim(non_spliced_exons_df)

total_df <- dplyr::bind_rows(spliced_exons_df, non_spliced_exons_df) #features df for ML with both SE and non SE exons label 1/0
dim(total_df)
```

Make % plots

```{r}

barplot_bppercent <- function(matrix) {
  # Convert the matrix to a data frame and pivot it to long format
  df <- as.data.frame(matrix)
  df$Sample <- rownames(df)
  
  df_long <- pivot_longer(df, cols = -Sample, names_to = "bp", values_to = "Value")
  
  # Calculate the mean value for each bp
  mean_df <- df_long %>% 
    group_by(bp) %>% 
    summarize(Mean = mean(Value)) %>%
    arrange(desc(Mean))
df_long$bp <- factor(df_long$bp, levels = mean_df$bp)

  # Create the ggplot2 plot
  p <- ggplot() +
    # Bar layer for the mean of each bp
    geom_bar(data = mean_df, aes(x = bp, y = Mean), 
             stat = "identity", fill = "darkgray", width = 0.7) +
    # Jitter layer for the individual data points
    geom_jitter(data = df_long, aes(x = bp, y = Value), 
                width = 0.15, size = 2, color = "#2972b6") +
    # Minimal theme and rotate x-axis labels 45 degrees
    theme_classic() +
    theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 12),
          plot.title = element_text(hjust = 0.5)) +
    labs(x = "bp combination", 
         y = "%", 
         title = "Pertentage of bp in exon's upstream region (150bp)")
  
  # Print the plot
  print(p)
}


bp_percent <-  get_bp_percent(seq_spliced_exons)
barplot_bppercent(bp_percent)

dibp_percent <-  get_dibp_features(seq_spliced_exons)
barplot_bppercent(dibp_percent)


tribp_percent <-  get_tribp_features(seq_spliced_exons)
barplot_bppercent(tribp_percent)


bp_percent <-  get_bp_percent(seq_non_spliced_exons)
barplot_bppercent(bp_percent)

dibp_percent <-  get_dibp_features(seq_non_spliced_exons)
barplot_bppercent(dibp_percent)


tribp_percent <-  get_tribp_features(seq_non_spliced_exons)
barplot_bppercent(tribp_percent)

```

```{r}
library(ggplot2)
library(tidyr)
library(dplyr)
library(plotly)

barplot_bppercent2 <- function(mat1, mat2, 
                               group1_label = "spliced", 
                               group2_label = "non-spliced",
                               group1_color = "#F84040",  # default blue
                               group2_color = "skyblue") {
  
  # Convert each matrix to a data frame, add sample names and a group identifier
  df1 <- as.data.frame(mat1)
  df1$Sample <- rownames(df1)
  df1$Group <- group1_label
  
  df2 <- as.data.frame(mat2)
  df2$Sample <- rownames(df2)
  df2$Group <- group2_label
  
  # Combine the two data frames
  df_all <- bind_rows(df1, df2)
  
  # Pivot the combined data frame to long format
  df_long <- pivot_longer(df_all, 
                          cols = -c(Sample, Group), 
                          names_to = "bp", 
                          values_to = "Value")
  
  # Calculate the mean for each bp within each group
  mean_df <- df_long %>% 
    group_by(bp, Group) %>% 
    summarize(Mean = mean(Value), .groups = "drop")
    
  # Calculate group1 means and sort bps by them (largest to smallest)
  group1_means <- mean_df %>% 
    filter(Group == group1_label) %>% 
    arrange(desc(Mean))
  
  # Update factor levels based on group1 ordering
  df_long$bp <- factor(df_long$bp, levels = group1_means$bp)
  mean_df$bp <- factor(mean_df$bp, levels = group1_means$bp)
  
  
  # Create the ggplot: grouped bars with jittered data points
  p <- ggplot() +
    # Bar layer: use position_dodge to separate groups
    geom_bar(data = mean_df, 
             aes(x = bp, y = Mean, fill = Group), 
             stat = "identity",
             position = position_dodge(width = 0.8), 
             width = 0.7) +
    # Jitter layer: position_jitterdodge to add jitter while respecting dodge groups
    geom_jitter(data = df_long, 
                aes(x = bp, y = Value, color = Group), 
                position = position_jitterdodge(jitter.width = 0.15, dodge.width = 0.8), 
                size = 1) +
    scale_fill_manual(values = setNames(c(group1_color, group2_color), 
                                        c(group1_label, group2_label)))+
    scale_color_manual(values = setNames(c(group1_color, group2_color), 
                                         c('gray', 'gray')))+
 
    theme_classic() +
    theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 10),
          plot.title = element_text(hjust = 0.5)) +
    labs(x = "bp combination", 
         y = "%", 
         title = "Percentage of bp in exon's upstream region (150bp)")
  
  ggplotly(p)
}
# % of bp
se_percent <-  get_bp_percent(seq_spliced_exons)
non_se_percent <-  get_bp_percent(seq_non_spliced_exons)
barplot_bppercent2(se_percent, non_se_percent)

# % of pairs
se_percent <-  get_dibp_features(seq_spliced_exons)
non_se_percent <-  get_dibp_features(seq_non_spliced_exons)
barplot_bppercent2(se_percent, non_se_percent)

# % of triplets
se_percent <-  get_tribp_features(seq_spliced_exons)
non_se_percent <-  get_tribp_features(seq_non_spliced_exons)
barplot_bppercent2(se_percent, non_se_percent)
```
