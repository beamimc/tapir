[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "TAPIR: Transcript analysis pipelines in R",
    "section": "",
    "text": "Book contents\nThis is where the good stuff goes.\nMaybe a description of the major sections…"
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "This is a book created from markdown and executable code.\nSee Knuth (1984) for additional discussion of literate programming.\n\n1 + 1\n\n[1] 2\n\n\n\n\n\n\nKnuth, Donald E. 1984. “Literate Programming.” Comput. J. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  },
  {
    "objectID": "eda.html",
    "href": "eda.html",
    "title": "2  Exploratory data analysis",
    "section": "",
    "text": "How can we explore transcript expression from long read data…\nLet’s load some data…\n\nlibrary(here)\n\nhere() starts at /Users/milove/bioc/tapir\n\nurl &lt;- \"https://github.com/gandallab/Dev_Brain_IsoSeq/raw/main/data/cp_vz_0.75_min_7_recovery_talon_abundance_filtered.tsv.gz\"\nfilename &lt;- basename(url)\npath &lt;- here(\"data\",filename)\nif (!file.exists(path)) {\n  download.file(url, path)\n}\n\n\nlibrary(readr)\n\n\nAttaching package: 'readr'\n\n\nThe following objects are masked from 'package:testthat':\n\n    edition_get, local_edition\n\nraw_abundance_table &lt;- read_delim(path)\n\nRows: 214516 Columns: 35\n\n\n── Column specification ────────────────────────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr  (7): annot_gene_id, annot_transcript_id, annot_gene_name, annot_transcript_name, gene_novel...\ndbl (28): gene_ID, transcript_ID, n_exons, length, 209_1_VZ, 209_2_VZ, 209_3_VZ, 209_4_VZ, 334_1...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\ndim(raw_abundance_table)\n\n[1] 214516     35\n\ncolnames(raw_abundance_table)\n\n [1] \"gene_ID\"               \"transcript_ID\"         \"annot_gene_id\"         \"annot_transcript_id\"  \n [5] \"annot_gene_name\"       \"annot_transcript_name\" \"n_exons\"               \"length\"               \n [9] \"gene_novelty\"          \"transcript_novelty\"    \"ISM_subtype\"           \"209_1_VZ\"             \n[13] \"209_2_VZ\"              \"209_3_VZ\"              \"209_4_VZ\"              \"334_1_VZ\"             \n[17] \"334_2_VZ\"              \"334_3_VZ\"              \"334_4_VZ\"              \"336_1_VZ\"             \n[21] \"336_2_VZ\"              \"336_3_VZ\"              \"336_4_VZ\"              \"334_1_CP\"             \n[25] \"334_2_CP\"              \"334_3_CP\"              \"334_4_CP\"              \"209_1_CP\"             \n[29] \"209_2_CP\"              \"209_3_CP\"              \"209_4_CP\"              \"336_1_CP\"             \n[33] \"336_2_CP\"              \"336_3_CP\"              \"336_4_CP\"             \n\nraw_abundance_table[1:5,1:15]\n\n# A tibble: 5 × 15\n  gene_ID transcript_ID annot_gene_id      annot_transcript_id annot_gene_name annot_transcript_name\n    &lt;dbl&gt;         &lt;dbl&gt; &lt;chr&gt;              &lt;chr&gt;               &lt;chr&gt;           &lt;chr&gt;                \n1      12            21 ENSG00000268903.1… ENST00000494149.2_2 AL627309.6      AL627309.6-201       \n2      18            34 ENSG00000228463.4  ENST00000424587.2   AP006222.2      AP006222.2-001       \n3      22            39 ENSG00000224813.2  ENST00000445840.1   RP4-669L17.4    RP4-669L17.4-001     \n4      32            65 ENSG00000225630.1… ENST00000457540.1_1 MTND2P28        MTND2P28-201         \n5      33            66 ENSG00000237973.1… ENST00000414273.1_1 MTCO1P12        MTCO1P12-201         \n# ℹ 9 more variables: n_exons &lt;dbl&gt;, length &lt;dbl&gt;, gene_novelty &lt;chr&gt;, transcript_novelty &lt;chr&gt;,\n#   ISM_subtype &lt;chr&gt;, `209_1_VZ` &lt;dbl&gt;, `209_2_VZ` &lt;dbl&gt;, `209_3_VZ` &lt;dbl&gt;, `209_4_VZ` &lt;dbl&gt;\n\n\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following object is masked from 'package:testthat':\n\n    matches\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(tidyr)\n\n\nAttaching package: 'tidyr'\n\n\nThe following object is masked from 'package:testthat':\n\n    matches\n\nraw_abundance_table |&gt;\n  select(contains(c(\"VZ\",\"CP\"))) |&gt;\n  summarize(across(everything(), sum))\n\n# A tibble: 1 × 24\n  `209_1_VZ` `209_2_VZ` `209_3_VZ` `209_4_VZ` `334_1_VZ` `334_2_VZ` `334_3_VZ` `334_4_VZ` `336_1_VZ`\n       &lt;dbl&gt;      &lt;dbl&gt;      &lt;dbl&gt;      &lt;dbl&gt;      &lt;dbl&gt;      &lt;dbl&gt;      &lt;dbl&gt;      &lt;dbl&gt;      &lt;dbl&gt;\n1     623608     542318     501999     529527    1273843    1594927    1160553    1546123    1328077\n# ℹ 15 more variables: `336_2_VZ` &lt;dbl&gt;, `336_3_VZ` &lt;dbl&gt;, `336_4_VZ` &lt;dbl&gt;, `334_1_CP` &lt;dbl&gt;,\n#   `334_2_CP` &lt;dbl&gt;, `334_3_CP` &lt;dbl&gt;, `334_4_CP` &lt;dbl&gt;, `209_1_CP` &lt;dbl&gt;, `209_2_CP` &lt;dbl&gt;,\n#   `209_3_CP` &lt;dbl&gt;, `209_4_CP` &lt;dbl&gt;, `336_1_CP` &lt;dbl&gt;, `336_2_CP` &lt;dbl&gt;, `336_3_CP` &lt;dbl&gt;,\n#   `336_4_CP` &lt;dbl&gt;\n\n\n…maybe now move some of the processing code from testing.qmd… we only need to do this once, and then we could save an intermediate object and re-load it for other chapters, so we aren’t always starting a chapter with the bookkeeping stuff. maybe we could have an earlier chapter just on loading/munging data from a flat file into a Bioconductor object."
  },
  {
    "objectID": "testing.html",
    "href": "testing.html",
    "title": "3  Statistical testing",
    "section": "",
    "text": "Let’s load some data…\n\nlibrary(here)\n\nhere() starts at /Users/milove/bioc/tapir\n\nfilename &lt;- \"cp_vz_0.75_min_7_recovery_talon_abundance_filtered.tsv.gz\"\npath &lt;- here(\"data\",filename)\nlibrary(readr)\n\n\nAttaching package: 'readr'\n\n\nThe following objects are masked from 'package:testthat':\n\n    edition_get, local_edition\n\nraw_abundance_table &lt;- read_delim(path)\n\nRows: 214516 Columns: 35\n\n\n── Column specification ────────────────────────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr  (7): annot_gene_id, annot_transcript_id, annot_gene_name, annot_transcript_name, gene_novel...\ndbl (28): gene_ID, transcript_ID, n_exons, length, 209_1_VZ, 209_2_VZ, 209_3_VZ, 209_4_VZ, 334_1...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\ndim(raw_abundance_table)\n\n[1] 214516     35\n\ncolnames(raw_abundance_table)\n\n [1] \"gene_ID\"               \"transcript_ID\"         \"annot_gene_id\"         \"annot_transcript_id\"  \n [5] \"annot_gene_name\"       \"annot_transcript_name\" \"n_exons\"               \"length\"               \n [9] \"gene_novelty\"          \"transcript_novelty\"    \"ISM_subtype\"           \"209_1_VZ\"             \n[13] \"209_2_VZ\"              \"209_3_VZ\"              \"209_4_VZ\"              \"334_1_VZ\"             \n[17] \"334_2_VZ\"              \"334_3_VZ\"              \"334_4_VZ\"              \"336_1_VZ\"             \n[21] \"336_2_VZ\"              \"336_3_VZ\"              \"336_4_VZ\"              \"334_1_CP\"             \n[25] \"334_2_CP\"              \"334_3_CP\"              \"334_4_CP\"              \"209_1_CP\"             \n[29] \"209_2_CP\"              \"209_3_CP\"              \"209_4_CP\"              \"336_1_CP\"             \n[33] \"336_2_CP\"              \"336_3_CP\"              \"336_4_CP\"             \n\n\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following object is masked from 'package:testthat':\n\n    matches\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\ncounts &lt;- raw_abundance_table |&gt;\n  select(gene_id = annot_gene_id,\n         feature_id = annot_transcript_id,\n         contains(c(\"VZ\",\"CP\")))\ncounts &lt;- counts |&gt;\n  rename_with(.cols = contains(c(\"VZ\",\"CP\")),\n              \\(x) paste0(\"s\", x))\nlibrary(tidyr)\n\n\nAttaching package: 'tidyr'\n\n\nThe following object is masked from 'package:testthat':\n\n    matches\n\nsamples &lt;- tibble(sample_id = colnames(counts)[-c(1:2)]) |&gt;\n  separate(sample_id, into=c(\"unit\",\"rep\",\"condition\"), sep=\"_\", remove=FALSE) |&gt;\n  mutate_at(c(\"rep\",\"condition\"), factor)\n\n\nlibrary(DRIMSeq)\n\n\nAttaching package: 'DRIMSeq'\n\n\nThe following object is masked from 'package:base':\n\n    proportions\n\nd &lt;- dmDSdata(counts=as.data.frame(counts),\n              samples=as.data.frame(samples))\nd\n\nAn object of class dmDSdata \nwith 24554 genes and 24 samples\n* data accessors: counts(), samples()\n\nn &lt;- 24\nn_small &lt;- 12\nd &lt;- dmFilter(d,\n              min_samps_feature_expr=n_small, min_feature_expr=10,\n              min_samps_feature_prop=n_small, min_feature_prop=0.1,\n              min_samps_gene_expr=n, min_gene_expr=10)\nd\n\nAn object of class dmDSdata \nwith 2071 genes and 24 samples\n* data accessors: counts(), samples()\n\ntable(table(counts(d)$gene_id))\n\n\n   2    3    4    5    6 \n1504  392  139   27    9 \n\n\n\nlibrary(DEXSeq)\n\nLoading required package: BiocParallel\n\n\nLoading required package: Biobase\n\n\nLoading required package: BiocGenerics\n\n\n\nAttaching package: 'BiocGenerics'\n\n\nThe following objects are masked from 'package:dplyr':\n\n    combine, intersect, setdiff, union\n\n\nThe following objects are masked from 'package:stats':\n\n    IQR, mad, sd, var, xtabs\n\n\nThe following objects are masked from 'package:base':\n\n    anyDuplicated, aperm, append, as.data.frame, basename, cbind, colnames, dirname,\n    do.call, duplicated, eval, evalq, Filter, Find, get, grep, grepl, intersect,\n    is.unsorted, lapply, Map, mapply, match, mget, order, paste, pmax, pmax.int, pmin,\n    pmin.int, Position, rank, rbind, Reduce, rownames, sapply, setdiff, table, tapply,\n    union, unique, unsplit, which.max, which.min\n\n\nWelcome to Bioconductor\n\n    Vignettes contain introductory material; view with 'browseVignettes()'. To cite\n    Bioconductor, see 'citation(\"Biobase\")', and for packages 'citation(\"pkgname\")'.\n\n\n\nAttaching package: 'Biobase'\n\n\nThe following object is masked from 'package:DRIMSeq':\n\n    samples\n\n\nLoading required package: SummarizedExperiment\n\n\nLoading required package: MatrixGenerics\n\n\nLoading required package: matrixStats\n\n\n\nAttaching package: 'matrixStats'\n\n\nThe following objects are masked from 'package:Biobase':\n\n    anyMissing, rowMedians\n\n\nThe following object is masked from 'package:dplyr':\n\n    count\n\n\n\nAttaching package: 'MatrixGenerics'\n\n\nThe following objects are masked from 'package:matrixStats':\n\n    colAlls, colAnyNAs, colAnys, colAvgsPerRowSet, colCollapse, colCounts, colCummaxs,\n    colCummins, colCumprods, colCumsums, colDiffs, colIQRDiffs, colIQRs, colLogSumExps,\n    colMadDiffs, colMads, colMaxs, colMeans2, colMedians, colMins, colOrderStats,\n    colProds, colQuantiles, colRanges, colRanks, colSdDiffs, colSds, colSums2,\n    colTabulates, colVarDiffs, colVars, colWeightedMads, colWeightedMeans,\n    colWeightedMedians, colWeightedSds, colWeightedVars, rowAlls, rowAnyNAs, rowAnys,\n    rowAvgsPerColSet, rowCollapse, rowCounts, rowCummaxs, rowCummins, rowCumprods,\n    rowCumsums, rowDiffs, rowIQRDiffs, rowIQRs, rowLogSumExps, rowMadDiffs, rowMads,\n    rowMaxs, rowMeans2, rowMedians, rowMins, rowOrderStats, rowProds, rowQuantiles,\n    rowRanges, rowRanks, rowSdDiffs, rowSds, rowSums2, rowTabulates, rowVarDiffs,\n    rowVars, rowWeightedMads, rowWeightedMeans, rowWeightedMedians, rowWeightedSds,\n    rowWeightedVars\n\n\nThe following object is masked from 'package:Biobase':\n\n    rowMedians\n\n\nLoading required package: GenomicRanges\n\n\nLoading required package: stats4\n\n\nLoading required package: S4Vectors\n\n\n\nAttaching package: 'S4Vectors'\n\n\nThe following object is masked from 'package:tidyr':\n\n    expand\n\n\nThe following objects are masked from 'package:dplyr':\n\n    first, rename\n\n\nThe following object is masked from 'package:utils':\n\n    findMatches\n\n\nThe following objects are masked from 'package:base':\n\n    expand.grid, I, unname\n\n\nLoading required package: IRanges\n\n\n\nAttaching package: 'IRanges'\n\n\nThe following objects are masked from 'package:dplyr':\n\n    collapse, desc, slice\n\n\nLoading required package: GenomeInfoDb\n\n\nLoading required package: DESeq2\n\n\n\nAttaching package: 'DESeq2'\n\n\nThe following object is masked from 'package:DRIMSeq':\n\n    results\n\n\nLoading required package: AnnotationDbi\n\n\n\nAttaching package: 'AnnotationDbi'\n\n\nThe following object is masked from 'package:dplyr':\n\n    select\n\n\nLoading required package: RColorBrewer\n\ncounts_for_dex &lt;- round(as.matrix(counts(d)[,-c(1:2)]))\ndxd &lt;- DEXSeqDataSet(\n  countData=counts_for_dex,\n  sampleData=samples,\n  design=~sample + exon + condition:exon,\n  featureID=counts(d)$feature_id,\n  groupID=counts(d)$gene_id\n)\n\nconverting counts to integer mode\n\n\nWarning in DESeqDataSet(rse, design, ignoreRank = TRUE): some variables in design formula are\ncharacters, converting to factors\n\n# 70 seconds\nif (FALSE) {\n  system.time({\n    dxd &lt;- estimateSizeFactors(dxd)\n    dxd &lt;- estimateDispersions(dxd, quiet=TRUE)\n    dxd &lt;- testForDEU(dxd, reducedModel=~sample + exon)\n  })\n  save(dxd, file=\"dxd.rda\")\n} else {\n  load(\"dxd.rda\")\n}\nres &lt;- DEXSeqResults(dxd)\n\n\nids &lt;- res[which.min(res$pvalue),1:2,drop=TRUE]\ncounts(d[ids$groupID,])\n\n               gene_id          feature_id s209_1_VZ s209_2_VZ s209_3_VZ s209_4_VZ s334_1_VZ\n1 ENSG00000077380.15_6 ENST00000409197.5_2        81        96        78        72       222\n2 ENSG00000077380.15_6 ENST00000409317.5_2       137       130       124       114       305\n3 ENSG00000077380.15_6     TALONT000671444        58        48        65        58       187\n  s334_2_VZ s334_3_VZ s334_4_VZ s336_1_VZ s336_2_VZ s336_3_VZ s336_4_VZ s334_1_CP s334_2_CP\n1       312       197       301       276       142       169       305        23        22\n2       395       272       389       336       211       211       336       323       455\n3       220       140       193       178       126       121       196       153       206\n  s334_3_CP s334_4_CP s209_1_CP s209_2_CP s209_3_CP s209_4_CP s336_1_CP s336_2_CP s336_3_CP\n1        14        19         9        13        16        16        13         7        10\n2       363       497       353       435       381       368       436       298       298\n3       159       241       169       178       142       165       248       136       166\n  s336_4_CP\n1        12\n2       518\n3       223\n\nids$featureID\n\n[1] \"ENST00000409197.5_2\"\n\nlibrary(pheatmap)\ndat &lt;- counts(d[ids$groupID,])[,-c(1:2)]\nrownames(dat) &lt;- counts(d[ids$groupID,])$feature_id\nanno_col &lt;- as.data.frame(samples[,\"condition\"])\nrownames(anno_col) &lt;- samples$sample_id\npheatmap(\n  dat,\n  cluster_cols=FALSE,\n  show_colnames=FALSE,\n  annotation_col=anno_col\n)"
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Knuth, Donald E. 1984. “Literate Programming.” Comput.\nJ. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  }
]